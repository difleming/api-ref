<?php
/**
 * Constructor and getters for books.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Block\Address;

use Magento\Customer\Service\V1\CustomerAccountServiceInterface;
use Magento\Customer\Service\V1\CustomerAddressServiceInterface;

/**
 * Constructs and gets information about a customer address book block object.
 *
 * @author      Magento Core Team <core@magentocommerce.com>
 * @package Magento\Customer\Block\Address Address package.
 */
class Book extends \Magento\Framework\View\Element\Template
{
    /**
     * @var \Magento\Customer\Helper\Session\CurrentCustomer Current customer.
     */
    protected $currentCustomer;

    /**
     * @var CustomerAccountServiceInterface Customer account service object.
     */
    protected $_customerAccountService;

    /**
     * @var CustomerAddressServiceInterface Address service object.
     */
    protected $_addressService;

    /**
     * @var \Magento\Customer\Model\Address\Config Address config object.
     */
    protected $_addressConfig;

    /**
     * Constructs a customer address book block object.
     *
     * @param \Magento\Framework\View\Element\Template\Context $context Context.
     * @param CustomerAccountServiceInterface $customerAccountService Customer account service interface object.
     * @param CustomerAddressServiceInterface $addressService Customer address service object.
     * @param \Magento\Customer\Helper\Session\CurrentCustomer $currentCustomer Current customer.
     * @param \Magento\Customer\Model\Address\Config $addressConfig Address config.
     * @param array $data An array of data.
     */
    public function __construct(
        \Magento\Framework\View\Element\Template\Context $context,
        CustomerAccountServiceInterface $customerAccountService,
        CustomerAddressServiceInterface $addressService,
        \Magento\Customer\Helper\Session\CurrentCustomer $currentCustomer,
        \Magento\Customer\Model\Address\Config $addressConfig,
        array $data = array()
    ) {
        $this->_customerAccountService = $customerAccountService;
        $this->currentCustomer = $currentCustomer;
        $this->_addressService = $addressService;
        $this->_addressConfig = $addressConfig;
        parent::__construct($context, $data);
        $this->_isScopePrivate = true;
    }

    /**
     * Prepares an address book layout.
     * @return $this Address book layout.
     */
    protected function _prepareLayout()
    {
        $this->getLayout()->getBlock('head')->setTitle(__('Address Book'));

        return parent::_prepareLayout();
    }

    /**
     * Gets a URL that enables a customer to add an address.
     * @return string Edit address URL.
     */
    public function getAddAddressUrl()
    {
        return $this->getUrl('customer/address/new', array('_secure' => true));
    }

    /**
     * Gets a URL that enables a customer to navigate back.
     * @return string Back URL.
     */
    public function getBackUrl()
    {
        if ($this->getRefererUrl()) {
            return $this->getRefererUrl();
        }
        return $this->getUrl('customer/account/', array('_secure' => true));
    }

    /**
     * Gets a URL that enables a customer to delete an address.
     * @return string Address delete URL.
     */
    public function getDeleteUrl()
    {
        return $this->getUrl('customer/address/delete');
    }

    /**
     * Gets a URL that enables a customer to edit an address.
     * @param int $addressId ID of the address.
     * @return string Edit address URL.
     */
    public function getAddressEditUrl($addressId)
    {
        return $this->getUrl('customer/address/edit', array('_secure' => true, 'id' => $addressId));
    }

    /**
     * Determines whether the current customer has a primary billing or shipping address.
     * @return bool * **true** Customer has a primary address.
     * * **false** Customer does not have a primary address.
     */
    public function hasPrimaryAddress()
    {
        return $this->getDefaultBilling() || $this->getDefaultShipping();
    }

    /**
     * Gets additional addresses for the current customer.
     *
     * @return \Magento\Customer\Service\V1\Data\Address[]|bool * If present, returns an array of one or more addresses.
     * * Otherwise, returns null.
     */
    public function getAdditionalAddresses()
    {
        try {
            $addresses = $this->_addressService->getAddresses($this->currentCustomer->getCustomerId());
        } catch (\Magento\Framework\Exception\NoSuchEntityException $e) {
            return false;
        }
        $primaryAddressIds = array($this->getDefaultBilling(), $this->getDefaultShipping());
        foreach ($addresses as $address) {
            if (!in_array($address->getId(), $primaryAddressIds)) {
                $additional[] = $address;
            }
        }
        return empty($additional) ? false : $additional;
    }

    /**
     * Renders and returns an address as HTML.
     *
     * @param \Magento\Customer\Service\V1\Data\Address $address An address.
     * @return string Address rendered as HTML.
     */
    public function getAddressHtml(\Magento\Customer\Service\V1\Data\Address $address = null)
    {
        if (!is_null($address)) {
            /** @var \Magento\Customer\Block\Address\Renderer\RendererInterface $renderer */
            $renderer = $this->_addressConfig->getFormatByCode('html')->getRenderer();
            return $renderer->renderArray(\Magento\Customer\Service\V1\Data\AddressConverter::toFlatArray($address));
        }
        return '';
    }

    /**
     * Gets the current customer.
     * @return \Magento\Customer\Service\V1\Data\Customer|null * Current customer.
     * * If current customer does not exist, returns null.
     * @throws \Magento\Framework\Exception\NoSuchEntityException Customer does not exist.
     */
    public function getCustomer()
    {
        $customer = $this->getData('customer');
        if (is_null($customer)) {
            try {
                $customer = $this->_customerAccountService->getCustomer($this->currentCustomer->getCustomerId());
            } catch (\Magento\Framework\Exception\NoSuchEntityException $e) {
                return null;
            }
            $this->setData('customer', $customer);
        }
        return $customer;
    }

    /**
     * Gets the default billing address.
     * @return int|null * Default billing address.
     * * If customer does not exist, returns null.
     */
    public function getDefaultBilling()
    {
        $customer = $this->getCustomer();
        if (is_null($customer)) {
            return null;
        } else {
            return $customer->getDefaultBilling();
        }
    }

    /**
     * Gets a specified address.
     * @param int $addressId The address ID.
     * @return \Magento\Customer\Service\V1\Data\Address|null * The address for the specified address ID.
     * * If no address exists for the specified ID, returns null.
     * @throws \Magento\Framework\Exception\NoSuchEntityException Address does not exist.
     */
    public function getAddressById($addressId)
    {
        try {
            return $this->_addressService->getAddress($addressId);
        } catch (\Magento\Framework\Exception\NoSuchEntityException $e) {
            return null;
        }
    }

    /**
     * Gets the default shipping address.
     * @return int|null * Default shipping address.
     * * If customer does not exist, returns null.
     */
    public function getDefaultShipping()
    {
        $customer = $this->getCustomer();
        if (is_null($customer)) {
            return null;
        } else {
            return $customer->getDefaultShipping();
        }
    }
}

