<?php
/**
 * Abstract widget constructor and getters.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Block\Widget;
/**
 * Constructs and gets information about an abstract widget object.
 * @package Magento\Customer\Block\Widget Widget package.
 */

class AbstractWidget extends \Magento\Framework\View\Element\Template
{
    /**
     * @var \Magento\Customer\Service\V1\CustomerMetadataServiceInterface Attribute metadata.
     */
    protected $_attributeMetadata;

    /**
     * @var \Magento\Customer\Helper\Address Address helper.
     */
    protected $_addressHelper;

    /**
     * Constructs an abstract widget object.
     *
     * @param \Magento\Framework\View\Element\Template\Context $context Context.
     * @param \Magento\Customer\Helper\Address $addressHelper Address helper.
     * @param \Magento\Customer\Service\V1\CustomerMetadataServiceInterface $attributeMetadata Attribute metadata.
     * @param array $data An array of data.
     */
    public function __construct(
        \Magento\Framework\View\Element\Template\Context $context,
        \Magento\Customer\Helper\Address $addressHelper,
        \Magento\Customer\Service\V1\CustomerMetadataServiceInterface $attributeMetadata,
        array $data = array()
    ) {
        $this->_addressHelper = $addressHelper;
        $this->_attributeMetadata = $attributeMetadata;
        parent::__construct($context, $data);
        $this->_isScopePrivate = true;
    }

    /**
     * Gets the configuration for a specified key.
     *
     * @param string $key Key.
     * @return null|string Configuration. Otherwise, null.
     */
    public function getConfig($key)
    {
        return $this->_addressHelper->getConfig($key);
    }

    /**
     * Gets the field ID format.
     *
     * @return string Field ID format.
     */
    public function getFieldIdFormat()
    {
        if (!$this->hasData('field_id_format')) {
            $this->setData('field_id_format', '%s');
        }
        return $this->getData('field_id_format');
    }

    /**
     * Gets the field name format.
     * @return string Field name format.
     */
    public function getFieldNameFormat()
    {
        if (!$this->hasData('field_name_format')) {
            $this->setData('field_name_format', '%s');
        }
        return $this->getData('field_name_format');
    }

    /**
     * Gets the field ID for a specified field.
     * @param string $field Field.
     * @return string Field ID.
     */
    public function getFieldId($field)
    {
        return sprintf($this->getFieldIdFormat(), $field);
    }

    /**
     * Gets the field name for a specified field.
     * @param string $field Field.
     * @return string Field name.
     */
    public function getFieldName($field)
    {
        return sprintf($this->getFieldNameFormat(), $field);
    }

    /**
     * Gets a customer attribute instance for a specified attribute.
     *
     * @param string $attributeCode Attribute code.
     * @return \Magento\Customer\Service\V1\Data\Eav\AttributeMetadata|null Customer attribute instance, if present. Otherwise, null.
     * @throws \Magento\Framework\Exception\NoSuchEntityException Specified attribute does not exist.
     */
    protected function _getAttribute($attributeCode)
    {
        try {
            return $this->_attributeMetadata->getCustomerAttributeMetadata($attributeCode);
        } catch (\Magento\Framework\Exception\NoSuchEntityException $e) {
            return null;
        }
    }
}

