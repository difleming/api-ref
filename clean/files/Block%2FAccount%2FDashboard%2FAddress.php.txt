<?php
/**
 * Constructs and gets information about customer addresses.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Block\Account\Dashboard;

use Magento\Customer\Service\V1\CustomerAccountServiceInterface;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Customer\Service\V1\Data\AddressConverter;

/**
 * Constructs displayable and editable customer addresses.
 * Displayable content is returned as HTML. Editable content is returned as a URL.
 *
 * These addresses can be displayed or edited through the dashboard.
 *
 * Use the customer address methods to:
 * * Construct a displayable and editable customer addresses object.
 * * Get information for the currently logged-in customer.
 * * Show the default billing or shipping address for the customer on the dashboard.
 * * Get a URL from which the customer can edit address information.
 * @package Magento\Customer\Block\Account\Dashboard
 */
class Address extends \Magento\Framework\View\Element\Template
{
    /**
     * @var \Magento\Customer\Model\Address\Config Address configuration.
     */
    protected $_addressConfig;

    /**
     * @var \Magento\Customer\Helper\Session\CurrentCustomer Customer object.
     */
    protected $currentCustomer;

    /**
     * @var \Magento\Customer\Helper\Session\CurrentCustomerAddress Customer address object.
     */
    protected $currentCustomerAddress;

    /**
     * Constructs a displayable and editable customer addresses object.
     *
     * @param \Magento\Framework\View\Element\Template\Context $context Context.
     * @param \Magento\Customer\Helper\Session\CurrentCustomer $currentCustomer Current customer.
     * @param \Magento\Customer\Helper\Session\CurrentCustomerAddress $currentCustomerAddress Current customer address.
     * @param \Magento\Customer\Model\Address\Config $addressConfig Address configuration.
     * @param array $data Array of data.
     */
    public function __construct(
        \Magento\Framework\View\Element\Template\Context $context,
        \Magento\Customer\Helper\Session\CurrentCustomer $currentCustomer,
        \Magento\Customer\Helper\Session\CurrentCustomerAddress $currentCustomerAddress,
        \Magento\Customer\Model\Address\Config $addressConfig,
        array $data = array()
    ) {
        $this->currentCustomer = $currentCustomer;
        $this->currentCustomerAddress = $currentCustomerAddress;
        $this->_addressConfig = $addressConfig;
        parent::__construct($context, $data);
        $this->_isScopePrivate = true;
    }

    /**
     * Gets information for the currently logged-in customer.
     *
     * @return \Magento\Customer\Service\V1\Data\Customer|null * If present, information about the logged-in customer.
     * * Otherwise, null.
     */
    public function getCustomer()
    {
        try {
            return $this->currentCustomer->getCustomer();
        } catch (NoSuchEntityException $e) {
            return null;
        }
    }

    /**
     * Gets HTML that displays the primary shipping address.
     *
     * @return string * Primary shipping address HTML, if shipping address is set.
     * * Otherwise, returns a message that indicates that the default shipping address has not been set.
     */
    public function getPrimaryShippingAddressHtml()
    {
        try {
            $address = $this->currentCustomerAddress->getDefaultShippingAddress();
        } catch (NoSuchEntityException $e) {
            return __('You have not set a default shipping address.');
        }

        if ($address) {
            return $this->_getAddressHtml($address);
        } else {
            return __('You have not set a default shipping address.');
        }
    }

    /**
     * Gets HTML that displays the primary billing address.
     *
     * @return string * Primary billing address HTML, if shipping address is set.
     * * Otherwise, returns a message that indicates that the default billing address has not been set.
     */
    public function getPrimaryBillingAddressHtml()
    {
        try {
            $address = $this->currentCustomerAddress->getDefaultBillingAddress();
        } catch (NoSuchEntityException $e) {
            return __('You have not set a default billing address.');
        }

        if ($address) {
            return $this->_getAddressHtml($address);
        } else {
            return __('You have not set a default billing address.');
        }
    }

    /**
     * Gets the URL that enables the customer to edit their primary shipping address.
     *
     * @return string Primary shipping address URL.
     */
    public function getPrimaryShippingAddressEditUrl()
    {
        if (is_null($this->getCustomer())) {
            return '';
        } else {
            return $this->_urlBuilder->getUrl(
                'customer/address/edit',
                array('id' => $this->getCustomer()->getDefaultShipping())
            );
        }
    }

    /**
     * Gets the URL that enables the customer to edit their primary billing address.
     *
     * @return string|null * Primary billing address URL, if primary billing address is set.
     * * Otherwise, null.
     */
    public function getPrimaryBillingAddressEditUrl()
    {
        if (is_null($this->getCustomer())) {
            return '';
        } else {
            return $this->_urlBuilder->getUrl(
                'customer/address/edit',
                array('id' => $this->getCustomer()->getDefaultBilling())
            );
        }
    }

    /**
     * Gets the URL that enables the customer to edit their address book.
     *
     * @return string Address book URL.
     */
    public function getAddressBookUrl()
    {
        return $this->getUrl('customer/address/');
    }

    /**
     * Renders and gets a specified address as HTML.
     *
     * @param \Magento\Customer\Service\V1\Data\Address $address Address.
     * @return string Address HTML.
     */
    protected function _getAddressHtml($address)
    {
        /** @var \Magento\Customer\Block\Address\Renderer\RendererInterface $renderer */
        $renderer = $this->_addressConfig->getFormatByCode('html')->getRenderer();
        return $renderer->renderArray(AddressConverter::toFlatArray($address));
    }
}

