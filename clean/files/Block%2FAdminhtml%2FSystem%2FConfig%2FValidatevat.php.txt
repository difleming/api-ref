<?php
/**
 * Constructs and gets information about an admin alidate value-added tax (VAT) ID validation block.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Block\Adminhtml\System\Config;
/**
 * Constructs and gets information about an admin alidate value-added tax (VAT) ID validation block.
 *
 * @author     Magento Core Team <core@magentocommerce.com>
 */
class Validatevat extends \Magento\Backend\Block\System\Config\Form\Field
{
    /**
     * Merchant country field name.
     *
     * @var string
     */
    protected $_merchantCountry = 'general_store_information_country_id';

    /**
     * Merchant VAT number field.
     *
     * @var string
     */
    protected $_merchantVatNumber = 'general_store_information_merchant_vat_number';

    /**
     * Validate VAT button label.
     *
     * @var string
     */
    protected $_vatButtonLabel = 'Validate VAT Number';

    /**
     * Sets the merchant country field name.
     *
     * @param string $countryField Country field.
     * @return \Magento\Customer\Block\Adminhtml\System\Config\Validatevat Validate VAT object.
     */
    public function setMerchantCountryField($countryField)
    {
        $this->_merchantCountry = $countryField;
        return $this;
    }

    /**
     * Gets the merchant country field name.
     *
     * @return string Country field name.
     */
    public function getMerchantCountryField()
    {
        return $this->_merchantCountry;
    }

    /**
     * Sets the merchant VAT number field.
     *
     * @param string $vatNumberField VAT number field.
     * @return \Magento\Customer\Block\Adminhtml\System\Config\Validatevat Validate VAT object.
     */
    public function setMerchantVatNumberField($vatNumberField)
    {
        $this->_merchantVatNumber = $vatNumberField;
        return $this;
    }

    /**
     * Gets the merchant VAT number field value.
     *
     * @return string Merchant VAT number.
     */
    public function getMerchantVatNumberField()
    {
        return $this->_merchantVatNumber;
    }

    /**
     * Sets the validate VAT button label.
     *
     * @param string $vatButtonLabel VAT button label.
     * @return \Magento\Customer\Block\Adminhtml\System\Config\Validatevat Validate VAT object.
     */
    public function setVatButtonLabel($vatButtonLabel)
    {
        $this->_vatButtonLabel = $vatButtonLabel;
        return $this;
    }

    /**
     * Sets the template to itself.
     *
     * @return \Magento\Customer\Block\Adminhtml\System\Config\Validatevat Validate VAT object.
     */
    protected function _prepareLayout()
    {
        parent::_prepareLayout();
        if (!$this->getTemplate()) {
            $this->setTemplate('system/config/validatevat.phtml');
        }
        return $this;
    }

    /**
     * Clears some non-related element parameters.
     *
     * @param \Magento\Framework\Data\Form\Element\AbstractElement $element Element.
     * @return string Rendered element.
     */
    public function render(\Magento\Framework\Data\Form\Element\AbstractElement $element)
    {
        $element->unsScope()->unsCanUseWebsiteValue()->unsCanUseDefaultValue();
        return parent::render($element);
    }

    /**
     * Gets the content of the button and scripts.
     *
     * @param \Magento\Framework\Data\Form\Element\AbstractElement $element Element.
     * @return string Content of button and scripts.
     */
    protected function _getElementHtml(\Magento\Framework\Data\Form\Element\AbstractElement $element)
    {
        $originalData = $element->getOriginalData();
        $buttonLabel = !empty($originalData['button_label']) ? $originalData['button_label'] : $this->_vatButtonLabel;
        $this->addData(
            array(
                'button_label' => __($buttonLabel),
                'html_id' => $element->getHtmlId(),
                'ajax_url' => $this->_urlBuilder->getUrl('customer/system_config_validatevat/validate')
            )
        );

        return $this->_toHtml();
    }
}

