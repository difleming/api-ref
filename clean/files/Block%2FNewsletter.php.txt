<?php
/**
 * Constructs and gets information about customer front newsletter management block.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Block;

use Magento\Customer\Service\V1\CustomerAccountServiceInterface;
use Magento\Customer\Service\V1\CustomerAddressServiceInterface;

/**
 * Constructs and gets information about customer front newsletter management block.
 */
class Newsletter extends \Magento\Customer\Block\Account\Dashboard
{
    /**
     * @var string *form/newsletter.phtml*
     */
    protected $_template = 'form/newsletter.phtml';

    /**
     * Constructs a customer front newsletter management block object.
     *
     * @param \Magento\Framework\View\Element\Template\Context $context Context.
     * @param \Magento\Customer\Model\Session $customerSession Customer session.
     * @param \Magento\Newsletter\Model\SubscriberFactory $subscriberFactory Subscriber factory.
     * @param CustomerAccountServiceInterface $customerAccountService Customer account service.
     * @param CustomerAddressServiceInterface $addressService Address service.
     * @param array $data An array of data.
     */
    public function __construct(
        \Magento\Framework\View\Element\Template\Context $context,
        \Magento\Customer\Model\Session $customerSession,
        \Magento\Newsletter\Model\SubscriberFactory $subscriberFactory,
        CustomerAccountServiceInterface $customerAccountService,
        CustomerAddressServiceInterface $addressService,
        array $data = array()
    ) {
        parent::__construct(
            $context,
            $customerSession,
            $subscriberFactory,
            $customerAccountService,
            $addressService,
            $data
        );
        $this->_isScopePrivate = true;
    }

    /**
     * Determines whether the customer is subscribed to the newsletter.
     * @return bool * **true** Subscribed.
     * * **false** Not subscribed.
     * @SuppressWarnings(PHPMD.BooleanGetMethodName)
     */
    public function getIsSubscribed()
    {
        return $this->getSubscriptionObject()->isSubscribed();
    }

    /**
     * Gets the save action URL.
     *
     * @return string Save action URL.
     */
    public function getAction()
    {
        return $this->getUrl('*/*/save');
    }
}

