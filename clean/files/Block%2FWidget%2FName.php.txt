<?php
/**
 * Constructs and gets information about a name widget.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Block\Widget;

use Magento\Customer\Service\V1\CustomerMetadataServiceInterface;
use Magento\Customer\Service\V1\Data\Customer;
use Magento\Framework\View\Element\Template\Context;
use Magento\Customer\Helper\Address as AddressHelper;
use Magento\Customer\Helper\Data as CustomerHelper;

/**
 * Constructs and gets information for a widget that shows a customer name.
 *
 * @method Customer getObject()
 * @method Name setObject(Customer $customer)
 */
class Name extends AbstractWidget
{
    /**
     * @var CustomerHelper Customer helper.
     */
    protected $_customerHelper;

    /**
     * Constructs a widget that shows a customer name.
     *
     * @param Context $context Context.
     * @param AddressHelper $addressHelper Address helper.
     * @param CustomerMetadataServiceInterface $attributeMetadata Attribute metadata.
     * @param CustomerHelper $customerHelper Customer helper.
     * @param array $data An array of data.
     */
    public function __construct(
        Context $context,
        AddressHelper $addressHelper,
        CustomerMetadataServiceInterface $attributeMetadata,
        CustomerHelper $customerHelper,
        array $data = array()
    ) {
        $this->_customerHelper = $customerHelper;
        parent::__construct($context, $addressHelper, $attributeMetadata, $data);
        $this->_isScopePrivate = true;
    }

    /**
     * Constructs widget location.
     *
     * @return void
     */
    public function _construct()
    {
        parent::_construct();

        // default template location
        $this->setTemplate('widget/name.phtml');
    }

    /**
     * Determines whether the configuration value for a specified key can be shown.
     *
     * @param string $key Key.
     * @return bool * **true* Can be shown.
     * * **false** Cannot be shown.
     */
    protected function _showConfig($key)
    {
        return (bool)$this->getConfig($key);
    }

    /**
     * Determines whether the prefix can be shown.
     *
     * @return bool * **true* Can be shown.
     * * **false** Cannot be shown.
     */
    public function showPrefix()
    {
        return $this->_isAttributeVisible('prefix');
    }

    /**
     * Determines whether a prefix attribute is required.
     *
     * @return bool * **true* Required.
     * * **false** Optional.
     */
    public function isPrefixRequired()
    {
        return $this->_isAttributeRequired('prefix');
    }

    /**
     * Gets the name prefix drop-down options.
     *
     * @return array|bool Drop-down options.
     */
    public function getPrefixOptions()
    {
        $prefixOptions = $this->_customerHelper->getNamePrefixOptions();

        if ($this->getObject() && !empty($prefixOptions)) {
            $oldPrefix = $this->escapeHtml(trim($this->getObject()->getPrefix()));
            $prefixOptions[$oldPrefix] = $oldPrefix;
        }
        return $prefixOptions;
    }

    /**
     * Determines whether a middle name attribute can be shown.
     *
     * @return bool * **true* Can be shown.
     * * **false** Cannot be shown.
     */
    public function showMiddlename()
    {
        return $this->_isAttributeVisible('middlename');
    }

    /**
     * Determines whether a middle name attribute is required.
     *
     * @return bool * **true* Required.
     * * **false** Optional.
     */
    public function isMiddlenameRequired()
    {
        return $this->_isAttributeRequired('middlename');
    }

    /**
     * Determines whether a suffix attribute can be shown.
     *
     * @return bool * **true* Can be shown.
     * * **false** Cannot be shown.
     */
    public function showSuffix()
    {
        return $this->_isAttributeVisible('suffix');
    }

    /**
     * Determines whether the suffix attribute is required.
     *
     * @return bool * **true* Required.
     * * **false** Optional.
     */
    public function isSuffixRequired()
    {
        return $this->_isAttributeRequired('suffix');
    }

    /**
     * Gets name suffix drop-down options.
     *
     * @return array|bool Drop-down options.
     */
    public function getSuffixOptions()
    {
        $suffixOptions = $this->_customerHelper->getNameSuffixOptions();
        if ($this->getObject() && !empty($suffixOptions)) {
            $oldSuffix = $this->escapeHtml(trim($this->getObject()->getSuffix()));
            $suffixOptions[$oldSuffix] = $oldSuffix;
        }
        return $suffixOptions;
    }

    /**
     * Gets the class name.
     *
     * @return string Class name.
     */
    public function getClassName()
    {
        if (!$this->hasData('class_name')) {
            $this->setData('class_name', 'customer-name');
        }
        return $this->getData('class_name');
    }

    /**
     * Gets the container class name.
     *
     * @return string Container class name.
     */
    public function getContainerClassName()
    {
        $class = $this->getClassName();
        $class .= $this->showPrefix() ? '-prefix' : '';
        $class .= $this->showMiddlename() ? '-middlename' : '';
        $class .= $this->showSuffix() ? '-suffix' : '';
        return $class;
    }

    /**
     * Gets the customer or customer address attribute instance for a specified attribute code.
     *
     * @param string $attributeCode Attribute code.
     * @return \Magento\Customer\Service\V1\Data\Eav\AttributeMetadata|null Customer or customer address attribute, if present. Otherwise, null.
     *
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     */
    protected function _getAttribute($attributeCode)
    {
        if ($this->getForceUseCustomerAttributes() || $this->getObject() instanceof Customer) {
            return parent::_getAttribute($attributeCode);
        }

        try {
            $attribute = $this->_attributeMetadata->getAddressAttributeMetadata($attributeCode);
        } catch (\Magento\Framework\Exception\NoSuchEntityException $e) {
            return null;
        }

        if ($this->getForceUseCustomerRequiredAttributes() && $attribute && !$attribute->isRequired()) {
            $customerAttribute = parent::_getAttribute($attributeCode);
            if ($customerAttribute && $customerAttribute->isRequired()) {
                $attribute = $customerAttribute;
            }
        }

        return $attribute;
    }

    /**
     * Gets the store attribute label for a specified attribute code.
     *
     * @param string $attributeCode Attribute code.
     * @return string Attribute label.
     */
    public function getStoreLabel($attributeCode)
    {
        $attribute = $this->_getAttribute($attributeCode);
        return $attribute ? __($attribute->getStoreLabel()) : '';
    }

    /**
     * Gets the string with front-end validation classes for a specified attribute code.
     *
     * @param string $attributeCode Attribute code.
     * @return string Front-end validation classes.
     */
    public function getAttributeValidationClass($attributeCode)
    {
        return $this->_addressHelper->getAttributeValidationClass($attributeCode);
    }

    /**
     * Determines whether a specified attribute is required.
     * @param string $attributeCode Attribute code.
     * @return bool * **true** Required.
     * * **false** Optional.
     */
    private function _isAttributeRequired($attributeCode)
    {
        $attributeMetadata = $this->_getAttribute($attributeCode);
        return $attributeMetadata ? (bool)$attributeMetadata->isRequired() : false;
    }

    /**
     * Determines whether a specified attribute can be shown.
     *
     * @param string $attributeCode Attribute code.
     * @return bool * **true** Can be shown.
     * * **false** Cannot be shown.
     */
    private function _isAttributeVisible($attributeCode)
    {
        $attributeMetadata = $this->_getAttribute($attributeCode);
        return $attributeMetadata ? (bool)$attributeMetadata->isVisible() : false;
    }
}

