<?php
/**
 * Constructor for a customer registration form block object.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Block\Form;

/**
 * Constructs, prepares, and gets information about a customer
 * registration form block object.
 */
class Register extends \Magento\Directory\Block\Data
{
    /**
     * @var \Magento\Customer\Model\Session Customer session.
     */
    protected $_customerSession;

    /**
     * @var \Magento\Framework\Module\Manager Module manager.
     */
    protected $_moduleManager;

    /**
     * @var \Magento\Customer\Helper\Data Customer helper.
     */
    protected $_customerHelper;

    /**
     * Constructs a customer registration form block object.
     *
     * @param \Magento\Framework\View\Element\Template\Context $context Context.
     * @param \Magento\Core\Helper\Data $coreData Core data.
     * @param \Magento\Framework\Json\EncoderInterface $jsonEncoder JSON encoder.
     * @param \Magento\Framework\App\Cache\Type\Config $configCacheType Config cache type.
     * @param \Magento\Directory\Model\Resource\Region\CollectionFactory $regionCollectionFactory Region collection factory.
     * @param \Magento\Directory\Model\Resource\Country\CollectionFactory $countryCollectionFactory Country collection factory.
     * @param \Magento\Framework\Module\Manager $moduleManager Module manager.
     * @param \Magento\Customer\Model\Session $customerSession Customer session.
     * @param \Magento\Customer\Helper\Data $customerHelper Customer helper.
     * @param array $data An array of data.
     * 
     * @SuppressWarnings(PHPMD.ExcessiveParameterList)
     */
    public function __construct(
        \Magento\Framework\View\Element\Template\Context $context,
        \Magento\Core\Helper\Data $coreData,
        \Magento\Framework\Json\EncoderInterface $jsonEncoder,
        \Magento\Framework\App\Cache\Type\Config $configCacheType,
        \Magento\Directory\Model\Resource\Region\CollectionFactory $regionCollectionFactory,
        \Magento\Directory\Model\Resource\Country\CollectionFactory $countryCollectionFactory,
        \Magento\Framework\Module\Manager $moduleManager,
        \Magento\Customer\Model\Session $customerSession,
        \Magento\Customer\Helper\Data $customerHelper,
        array $data = array()
    ) {
        $this->_customerHelper = $customerHelper;
        $this->_moduleManager = $moduleManager;
        $this->_customerSession = $customerSession;
        parent::__construct(
            $context,
            $coreData,
            $jsonEncoder,
            $configCacheType,
            $regionCollectionFactory,
            $countryCollectionFactory,
            $data
        );
        $this->_isScopePrivate = true;
    }

    /**
     * Gets the configuration for a specified path.
     *
     * @param string $path Path.
     * @return string|null The configuration, if present. Otherwise, null.
     */
    public function getConfig($path)
    {
        return $this->_scopeConfig->getValue($path, \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }

    /**
     * Prepares the layout for a customer registration form block.
     * @return $this Prepared layout.
     */
    protected function _prepareLayout()
    {
        $this->getLayout()->getBlock('head')->setTitle(__('Create New Customer Account'));
        return parent::_prepareLayout();
    }

    /**
     * Gets a form posting URL.
     *
     * @return string Form posting URL.
     */
    public function getPostActionUrl()
    {
        return $this->_customerHelper->getRegisterPostUrl();
    }

    /**
     * Gets a go back URL.
     *
     * @return string Back URL.
     */
    public function getBackUrl()
    {
        $url = $this->getData('back_url');
        if (is_null($url)) {
            $url = $this->_customerHelper->getLoginUrl();
        }
        return $url;
    }

    /**
     * Gets form data.
     *
     * @return mixed Form data.
     */
    public function getFormData()
    {
        $data = $this->getData('form_data');
        if (is_null($data)) {
            $formData = $this->_customerSession->getCustomerFormData(true);
            $data = new \Magento\Framework\Object();
            if ($formData) {
                $data->addData($formData);
                $data->setCustomerData(1);
            }
            if (isset($data['region_id'])) {
                $data['region_id'] = (int)$data['region_id'];
            }
            $this->setData('form_data', $data);
        }
        return $data;
    }

    /**
     * Gets the customer country ID.
     *
     * @return int Customer country ID.
     */
    public function getCountryId()
    {
        $countryId = $this->getFormData()->getCountryId();
        if ($countryId) {
            return $countryId;
        }
        return parent::getCountryId();
    }

    /**
     * Gets the customer region ID.
     *
     * @return int|null The region ID, if present. Otherwise, null.
     */
    public function getRegion()
    {
        if (null !== ($region = $this->getFormData()->getRegion())) {
            return $region;
        } else if (null !== ($region = $this->getFormData()->getRegionId())) {
            return $region;
        }
        return null;
    }

    /**
     * Determines whether the newsletter module is available.
     *
     * @return bool * **true** Available.
     * * **false** Not available.
     */
    public function isNewsletterEnabled()
    {
        return $this->_moduleManager->isOutputEnabled('Magento_Newsletter');
    }

    /**
     * Restores entity data from a session.
     * Entity and form code must be defined for the form.
     *
     * @param \Magento\Customer\Model\Metadata\Form $form Form code.
     * @param string|null $scope Optional. The scope. Default is null.
     * @return $this Entity data.
     */
    public function restoreSessionData(\Magento\Customer\Model\Metadata\Form $form, $scope = null)
    {
        if ($this->getFormData()->getCustomerData()) {
            $request = $form->prepareRequest($this->getFormData()->getData());
            $data = $form->extractData($request, $scope, false);
            $form->restoreData($data);
        }

        return $this;
    }
}

