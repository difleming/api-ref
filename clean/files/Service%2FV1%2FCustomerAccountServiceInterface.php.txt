<?php
/**
 * Customer account service interface.
 *
 * {license_notice}
 *
 * @copyright {copyright}
 * @license {license}
 */
namespace Magento\Customer\Service\V1;
/**
 * Enables customer account creation and management.
 *
 * The constants define some default values for new accounts.
 *
 * The methods enable you to:
 * * Create customers with a password or a hashed password.
 * * Update, show information for, show details for, and delete customer accounts.
 * * Activate, find, or log in a customer.
 * * Check email availability or change the password for a customer
 * * Get customer attributes, such as confirmation status, can update, can delete, and is customer in store.
 * * Validate a token in a reset passwork link.
 * * Send or resend email to customer.
 */
interface CustomerAccountServiceInterface
{
    /**#@+
     * Constants for the customer account service.
     */
    /**
     * New email account registration status.
     */
    const NEW_ACCOUNT_EMAIL_REGISTERED = 'registered';
    /**
     * Confirmation email type. Default is confirmation.
     */
    const NEW_ACCOUNT_EMAIL_CONFIRMATION = 'confirmation';
    /**
     * Account confirmation status.
     */
    const ACCOUNT_CONFIRMED = 'account_confirmed';
    /**
     * Account confirmation is required.
     */
    const ACCOUNT_CONFIRMATION_REQUIRED = 'account_confirmation_required';
    /**
     * Account confirmation is not required.
     */
    const ACCOUNT_CONFIRMATION_NOT_REQUIRED = 'account_confirmation_not_required';
    /**
     * Send reminder email.
     */
    const EMAIL_REMINDER = 'email_reminder';
    /**
     * Send reset email.
     */
    const EMAIL_RESET = 'email_reset';
    /**
     * Default password length. Default is 6.
     */
    const DEFAULT_PASSWORD_LENGTH = 6;
    /**#@-*/

    /**
     * Creates a customer account with thespecified customer details, password, and redirect URL.
     * 
     * The *$password* parameter is ignored if a hashed password is stored for the customer.
     *
     * Templates can use the redirect URL to direct the customer to a product that they browsed after
     * they clicked the confirmation link.
     *
     * CustomerDetails is required and contains an array of address data. If no changes
     * are to be made to addresses, this array must be present and null.
     *
     * @param Data\CustomerDetails $customerDetails An array of address data.
     * @param null $password Optional. Customer password. Default is null, which assigns a random password. 
     * @param string $redirectUrl Optional. The redirect URL to include in the confirmation email.
     * @return \Magento\Customer\Service\V1\Data\Customer A customer account service object.
     * @throws \Magento\Framework\Exception\InputException Input is not valid.
     * @throws \Magento\Framework\Exception\State\InputMismatchException The specified email is in use.
     */
    public function createCustomer(
        \Magento\Customer\Service\V1\Data\CustomerDetails $customerDetails,
        $password = null,
        $redirectUrl = ''
    );

    /**
     * Creates a customer account with the specified hashed password.
     *
     * Templates can use the redirect URL to direct the customer to a product that they browsed after
     * they clicked the confirmation link.
     *
     * CustomerDetails is required and contains an array of address data. If no changes
     * are to be made to addresses, this array must be present and null.
     *
     * @internal Do not expose this function as a web API.
     *
     * @param Data\CustomerDetails $customerDetails An array of address data.
     * @param $hash Hashed password that can be saved.
     * @param string $redirectUrl Optional. The redirect URL to include in the confirmation email.
     * @return \Magento\Customer\Service\V1\Data\Customer
     * @throws \Magento\Framework\Exception\InputException Input was not valid.
     * @throws \Magento\Framework\Exception\State\InputMismatchException The specified email was in use.
     */
    public function createCustomerWithPasswordHash(
        \Magento\Customer\Service\V1\Data\CustomerDetails $customerDetails,
        $hash,
        $redirectUrl = ''
    );

    /**
     * Updates the account details for a customer.
     * 
     * CustomerDetails is required and contains an array of address data. If no changes
     * are to be made to addresses, this array must be present and null.
     *
     * @param Data\CustomerDetails $customerDetails An array of address data.
     * @return bool * **true** -  The update succeeded.
     * * **false** -  The update failed.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     */
    public function updateCustomer(\Magento\Customer\Service\V1\Data\CustomerDetails $customerDetails);

    /**
     * Shows details for a specified customer.
     *
     * @param int $customerId The customer ID.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @return \Magento\Customer\Service\V1\Data\Customer A customer account service object.
     */
    public function getCustomer($customerId);

    /**
     * Activates a specified customer account by using a confirmation token from a confirmation email.
     *
     * @param int $customerId The customer ID.
     * @param string $confirmationKey A confirmation token that was emailed to the customer.
     * @return \Magento\Customer\Service\V1\Data\Customer A customer account service object.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @throws \Magento\Framework\Exception\State\InputMismatchException The token is not valid.
     * @throws \Magento\Framework\Exception\State\InvalidTransitionException The account is already active.
     */
    public function activateCustomer($customerId, $confirmationKey);

    /**
     * Finds customers that match specified search criteria.
     *
     * @param \Magento\Framework\Service\V1\Data\SearchCriteria $searchCriteria Search criteria.
     * @throws \Magento\Framework\Exception\InputException The input is not valid.
     * @return \Magento\Customer\Service\V1\Data\SearchResults containing Data\CustomerDetails Search results.
     */
    public function searchCustomers(\Magento\Framework\Service\V1\Data\SearchCriteria $searchCriteria);

    /**
     * Logs in to a customer account by using a specified user name and password.
     *
     * @param string $username The user name in plain text.
     * @param string $password The password in plain text.
     * @return \Magento\Customer\Service\V1\Data\Customer A customer account service object.
     * @throws \Magento\Framework\Exception\AuthenticationException Authentication failed.
     * @throws \Magento\Framework\Exception\EmailNotConfirmedException The account is unconfirmed.
     * @throws \Magento\Framework\Exception\InvalidEmailOrPasswordException The specified email or password is not valid.
     */
    public function authenticate($username, $password);

    /**
     * Changes the password for a specified customer.
     *
     * @param int $customerId The customer ID.
     * @param string $currentPassword The current password.
     * @param string $newPassword The new password.
     * @return bool * **true** -  Password change succeeded. 
     * * **false** -  Password change failed.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @throws \Magento\Framework\Exception\InvalidEmailOrPasswordException The current password is not valid.
     */
    public function changePassword($customerId, $currentPassword, $newPassword);

    /**
     * Gets the hashed password for a customer. 
     * 
     * You can save this password to the database.
     *
     * @param string $password The password.
     * @return string A hashed password. You can save this password to the database.
     * @todo this method has to be removed when the checkout process refactored in the way it won't require to pass
     *       a password through requests
     */
    public function getPasswordHash($password);

    /**
     * Validates a specified password reset token for a specified customer.
     *
     * @param int $customerId The customer ID.
     * @param string $resetPasswordLinkToken A reset password token.
     * @return void
     * @throws \Magento\Framework\Exception\State\InputMismatchException The token is mismatched.
     * @throws \Magento\Framework\Exception\State\ExpiredException The token is expired.
     * @throws \Magento\Framework\Exception\InputException The token or customer ID is not valid.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     */
    public function validateResetPasswordLinkToken($customerId, $resetPasswordLinkToken);

    /**
     * Sends an email to the customer with a password reset link.
     *
     * @param string $email
     * @param string $template Type of email to send. Must be one of the email constants.
     * @param int $websiteId Optional. The website ID. Default is the current website ID retrieved from the store manager.
     * @return void
     */
    public function initiatePasswordReset($email, $template, $websiteId = null);

    /**
     * Resets the password for a specified customer.
     * 
     * The reset token is required.
     *
     * @param int $customerId The customer ID.
     * @param string $resetToken The reset token emailed to the customer.
     * @param string $newPassword The new password.
     * @return void
     * @throws \Magento\Framework\Exception\State\InputMismatchException The token is mismatched.
     * @throws \Magento\Framework\Exception\State\ExpiredException The token is expired.
     * @throws \Magento\Framework\Exception\InputException The token or customer ID is not valid.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     */
    public function resetPassword($customerId, $resetToken, $newPassword);

    /**
     * Gets the account confirmation status for a specified customer.
     *
     * @param int $customerId
     * @return string The account confirmation status. The status is xx, xx, or xx.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     */
    public function getConfirmationStatus($customerId);

    /**
     * Resends a confirmation email.
     *
     * Templates can use the redirect URL to direct the customer to a product that they browsed after
     * they clicked the confirmation link.
     *
     * @param string $email       The customer email address.
     * @param string $websiteId   The website ID.
     * @param string $redirectUrl (Optional) The redirect URL to include in the confirmation email. Default is an empty string.
     * @return void
     */
    public function resendConfirmation($email, $websiteId, $redirectUrl = '');

    /**
     * Validates a customer entity.
     *
     * @param \Magento\Customer\Service\V1\Data\Customer $customer
     * @param \Magento\Customer\Service\V1\Data\Eav\AttributeMetadata[] $attributes
     * @return \Magento\Customer\Service\V1\Data\CustomerValidationResults
     */
    public function validateCustomerData(
        \Magento\Customer\Service\V1\Data\Customer $customer,
        array $attributes = array()
    );

    /**
     * Indicates whether the specified customer can be modified or is read-only.
     *
     * @param int $customerId
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @return bool * **true** -  Modifications permitted. 
     * * **false** -  Read-only.
     */
    public function canModify($customerId);

    /**
     * Indicates whether or not the specified customer can be deleted.
     *
     * @param int $customerId The customer ID.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @return bool * **true** -  Customer can be deleted. 
     * * **false** -  Read-only.
     */
    public function canDelete($customerId);

    /**
     * Shows details for a specified customer.
     *
     * @param int $customerId The customer ID.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @return \Magento\Customer\Service\V1\Data\CustomerDetails An array of address data.
     */
    public function getCustomerDetails($customerId);

    /**
     * Deletes a specified customer.
     *
     * @param int $customerId The customer ID.
     * @throws \Magento\Customer\Exception Delete failed.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @return bool * **true** -  Delete succeeded. 
     * * **false** -  Delete failed.
     */
    public function deleteCustomer($customerId);

    /**
     * Indicates whether an email is associated with a customer account in the specified website.
     *
     * @param string $customerEmail Customer email address.
     * @param int $websiteId Optional. The website ID. Default is the current website ID.
     * @return bool * **true** -  Email is available.
     * * **false** -  Email is not available.
     */
    public function isEmailAvailable($customerEmail, $websiteId = null);

    /**
     * Indicates whether the specified customer is in the store.
     *
     * @param int $customerWebsiteId The website ID.
     * @param int $storeId
     * @return bool * **true** -  In store.
     * * **false** -  Not in store.
     */
    public function isCustomerInStore($customerWebsiteId, $storeId);

    /**
     * Shows information for a specified customer.
     *
     * Specify the customer by email and, optionally, website ID.
     *
     * @param string $customerEmail The customer email address.
     * @param int $websiteId Optional. The website ID. Default is the current website ID.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @return \Magento\Customer\Service\V1\Data\Customer A customer object.
     */
    public function getCustomerByEmail($customerEmail, $websiteId = null);

    /**
     * Shows details for a specified customer.
     *
     * Specify the customer by email and, optionally, website ID.
     *
     * @param string $customerEmail The customer email.
     * @param int $websiteId Optional. The website ID. Default is the current website ID.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @return \Magento\Customer\Service\V1\Data\CustomerDetails An array of address data.
     */
    public function getCustomerDetailsByEmail($customerEmail, $websiteId = null);

    /**
     * Updates account details for a specified customer.
     *
     * Specify the customer by email and, optionally, website ID.
     * 
     * CustomerDetails is required and contains an array of address data. If no changes
     * are to be made to addresses, this array must be present and null.
     *
     * @param string $customerEmail The customer email.
     * @param \Magento\Customer\Service\V1\Data\CustomerDetails $customerDetails An array of address data.
     * @param int $websiteId Optional. The website ID. Default is the current website ID.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @return bool * **true** -  Update succeeded.
     * * **false** -  Update failed.
     */
    public function updateCustomerDetailsByEmail(
        $customerEmail,
        \Magento\Customer\Service\V1\Data\CustomerDetails $customerDetails,
        $websiteId = null
    );

    /**
     * Deletes a specified customer.
     *
     * Specify the customer by email and, optionally, website ID.
     *
     * @param string $customerEmail The customer email.
     * @param int $websiteId Optional. The website ID. Default is the current website ID.
     * @throws \Magento\Customer\Exception Delete failed.
     * @throws \Magento\Framework\Exception\NoSuchEntityException The specified customer does not exist.
     * @return bool * **true** -  Delete succeeded.
     * * **false** -  Delete failed.
     */
    public function deleteCustomerByEmail($customerEmail, $websiteId = null);
}

