<?php
/**
 * Customer address controller.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Controller;

use Magento\Framework\App\RequestInterface;

/**
 * Customer address controller.
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class Address extends \Magento\Framework\App\Action\Action
{
    /**
     * @var \Magento\Customer\Model\Session Customer session.
     */
    protected $_customerSession;

    /**
     * @var \Magento\Core\App\Action\FormKeyValidator Form key validator.
     */
    protected $_formKeyValidator;

    /**
     * @var \Magento\Customer\Service\V1\CustomerAddressServiceInterface Address service.
     */
    protected $_addressService;

    /**
     * @var \Magento\Customer\Model\Metadata\FormFactory Form factory.
     */
    protected $_formFactory;

    /**
     * @var \Magento\Customer\Service\V1\Data\RegionBuilder Region builder.
     */
    protected $_regionBuilder;

    /**
     * @var \Magento\Customer\Service\V1\Data\AddressBuilder Address builder.
     */
    protected $_addressBuilder;

    /**
     * Constructs customer address object.
     *
     * @param \Magento\Framework\App\Action\Context $context Context.
     * @param \Magento\Customer\Model\Session $customerSession Customer session.
     * @param \Magento\Core\App\Action\FormKeyValidator $formKeyValidator Form key validator.
     * @param \Magento\Customer\Service\V1\CustomerAddressServiceInterface $addressService Address service.
     * @param \Magento\Customer\Model\Metadata\FormFactory $formFactory Form factory.
     * @param \Magento\Customer\Service\V1\Data\RegionBuilder $regionBuilder Region builder.
     * @param \Magento\Customer\Service\V1\Data\AddressBuilder $addressBuilder Address builder.
     * @internal param \Magento\Customer\Helper\Data $customerData Customer data.
     * @internal param \Magento\Customer\Model\AddressFactory $addressFactory Address factory.
     * @internal param \Magento\Customer\Model\Address\FormFactory $addressFormFactory Address form factory.
     */
    public function __construct(
        \Magento\Framework\App\Action\Context $context,
        \Magento\Customer\Model\Session $customerSession,
        \Magento\Core\App\Action\FormKeyValidator $formKeyValidator,
        \Magento\Customer\Service\V1\CustomerAddressServiceInterface $addressService,
        \Magento\Customer\Model\Metadata\FormFactory $formFactory,
        \Magento\Customer\Service\V1\Data\RegionBuilder $regionBuilder,
        \Magento\Customer\Service\V1\Data\AddressBuilder $addressBuilder
    ) {
        $this->_customerSession = $customerSession;
        $this->_formKeyValidator = $formKeyValidator;
        $this->_addressService = $addressService;
        $this->_formFactory = $formFactory;
        $this->_regionBuilder = $regionBuilder;
        $this->_addressBuilder = $addressBuilder;
        parent::__construct($context);
    }

    /**
     * Gets the customer session object.
     *
     * @return \Magento\Customer\Model\Session Customer session object.
     */
    protected function _getSession()
    {
        return $this->_customerSession;
    }

    /**
     * Checks customer authentication.
     *
     * @param RequestInterface $request Request interface.
     * @return \Magento\Framework\App\ResponseInterface Response interface.
     */
    public function dispatch(RequestInterface $request)
    {
        if (!$this->_getSession()->authenticate($this)) {
            $this->_actionFlag->set('', 'no-dispatch', true);
        }
        return parent::dispatch($request);
    }

    /**
     * Builds a URL.
     * @param string $route Optional. The route. Default is an empty string.
     * @param array $params An array of parameters.
     * @return string URL.
     */
    protected function _buildUrl($route = '', $params = array())
    {
        /** @var \Magento\Framework\UrlInterface $urlBuilder */
        $urlBuilder = $this->_objectManager->create('Magento\Framework\UrlInterface');
        return $urlBuilder->getUrl($route, $params);
    }
}

