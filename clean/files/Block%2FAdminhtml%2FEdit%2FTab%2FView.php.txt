<?php
/**
 * Constructs and renders a customer account form block object.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Block\Adminhtml\Edit\Tab;

use Magento\Customer\Controller\RegistryConstants;
use Magento\Customer\Service\V1\CustomerAccountServiceInterface;
use Magento\Customer\Service\V1\Data\AddressConverter;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Stdlib\DateTime\TimezoneInterface;

/**
 * Renders a customer account form block.
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class View extends \Magento\Backend\Block\Template implements \Magento\Backend\Block\Widget\Tab\TabInterface
{
    /**
     * @var \Magento\Customer\Service\V1\Data\Customer Customer.
     */
    protected $_customer;

    /**
     * @var \Magento\Log\Model\Customer Customer log.
     */
    protected $_customerLog;

    /**
     * Core registry.
     *
     * @var \Magento\Framework\Registry
     */
    protected $_coreRegistry;

    /**
     * @var \Magento\Log\Model\Visitor Model visitor.
     */
    protected $_modelVisitor;

    /**
     * @var CustomerAccountServiceInterface Account service.
     */
    protected $_accountService;

    /**
     * @var \Magento\Customer\Service\V1\CustomerAddressServiceInterface Address service.
     */
    protected $_addressService;

    /**
     * @var \Magento\Customer\Service\V1\CustomerGroupServiceInterface Group service.
     */
    protected $_groupService;

    /**
     * @var \Magento\Customer\Service\V1\Data\CustomerBuilder Customer builder.
     */
    protected $_customerBuilder;

    /**
     * @var \Magento\Customer\Helper\Address Address helper.
     */
    protected $_addressHelper;

    /**
     * @var \Magento\Log\Model\CustomerFactory Customer factory.
     */
    protected $_logFactory;

    /**
     * @var \Magento\Framework\Stdlib\DateTime Date and time.
     */
    protected $dateTime;

    /**
     * Constructs a customer account form block object.
     *
     * @param \Magento\Backend\Block\Template\Context $context Context.
     * @param CustomerAccountServiceInterface $accountService Account service.
     * @param \Magento\Customer\Service\V1\CustomerAddressServiceInterface $addressService Address service.
     * @param \Magento\Customer\Service\V1\CustomerGroupServiceInterface $groupService Group service.
     * @param \Magento\Customer\Service\V1\Data\CustomerBuilder $customerBuilder Customer builder.
     * @param \Magento\Customer\Helper\Address $addressHelper Address helper.
     * @param \Magento\Log\Model\CustomerFactory $logFactory Log factory.
     * @param \Magento\Framework\Registry $registry Registry.
     * @param \Magento\Log\Model\Visitor $modelVisitor Model visitor.
     * @param \Magento\Framework\Stdlib\DateTime $dateTime Date and time.
     * @param array $data An array of data.
     *
     * @SuppressWarnings(PHPMD.ExcessiveParameterList)
     */
    public function __construct(
        \Magento\Backend\Block\Template\Context $context,
        CustomerAccountServiceInterface $accountService,
        \Magento\Customer\Service\V1\CustomerAddressServiceInterface $addressService,
        \Magento\Customer\Service\V1\CustomerGroupServiceInterface $groupService,
        \Magento\Customer\Service\V1\Data\CustomerBuilder $customerBuilder,
        \Magento\Customer\Helper\Address $addressHelper,
        \Magento\Log\Model\CustomerFactory $logFactory,
        \Magento\Framework\Registry $registry,
        \Magento\Log\Model\Visitor $modelVisitor,
        \Magento\Framework\Stdlib\DateTime $dateTime,
        array $data = array()
    ) {
        $this->_coreRegistry = $registry;
        $this->_modelVisitor = $modelVisitor;
        $this->_accountService = $accountService;
        $this->_addressService = $addressService;
        $this->_groupService = $groupService;
        $this->_customerBuilder = $customerBuilder;
        $this->_addressHelper = $addressHelper;
        $this->_logFactory = $logFactory;
        $this->dateTime = $dateTime;
        parent::__construct($context, $data);
    }

    /**
     * Gets a customer object.
     * @return \Magento\Customer\Service\V1\Data\Customer Customer object.
     */
    public function getCustomer()
    {
        if (!$this->_customer) {
            $this->_customer = $this->_customerBuilder->populateWithArray(
                $this->_backendSession->getCustomerData()['account']
            )->create();
        }
        return $this->_customer;
    }

    /**
     * Gets a customer ID.
     * @return string|null Customer ID. Otherwise, null.
     */
    public function getCustomerId()
    {
        return $this->_coreRegistry->registry(RegistryConstants::CURRENT_CUSTOMER_ID);
    }

    /**
     * Gets a group for a specified group ID.
     * @param int $groupId Group ID.
     * @return \Magento\Customer\Service\V1\Data\CustomerGroup|null Customer group. Otherwise, null.
     */
    private function getGroup($groupId)
    {
        try {
            $group = $this->_groupService->getGroup($groupId);
        } catch (NoSuchEntityException $e) {
            $group = null;
        }
        return $group;
    }

    /**
     * Gets a group name.
     * @return string|null Group name. Otherwise, null.
     */
    public function getGroupName()
    {
        $customer = $this->getCustomer();

        if ($groupId = $customer->getId() ? $customer->getGroupId() : null) {
            if ($group = $this->getGroup($groupId)) {
                return $group->getCode();
            }
        }

        return null;
    }

    /**
     * Loads a customer log model.
     *
     * @return \Magento\Log\Model\Customer Customer log model.
     */
    public function getCustomerLog()
    {
        if (!$this->_customerLog) {
            $this->_customerLog = $this->_logFactory->create()->loadByCustomer($this->getCustomerId());
        }
        return $this->_customerLog;
    }

    /**
     * Get the customer creation date.
     *
     * @return string Customer creation date.
     */
    public function getCreateDate()
    {
        return $this->formatDate(
            $this->getCustomer()->getCreatedAt(),
            TimezoneInterface::FORMAT_TYPE_MEDIUM,
            true
        );
    }

    /**
     * Gets the store creation date.
     * @return string Store creation date.
     */
    public function getStoreCreateDate()
    {
        $date = $this->_localeDate->scopeDate(
            $this->getCustomer()->getStoreId(),
            $this->getCustomer()->getCreatedAt(),
            true
        );
        return $this->formatDate($date, TimezoneInterface::FORMAT_TYPE_MEDIUM, true);
    }

    /**
     * Gets the time zone for the store creation date.
     * @return string Time zone.
     */
    public function getStoreCreateDateTimezone()
    {
        return $this->_scopeConfig->getValue(
            $this->_localeDate->getDefaultTimezonePath(),
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
            $this->getCustomer()->getStoreId()
        );
    }

    /**
     * Gets the customer last login date.
     *
     * @return string Last login date.
     */
    public function getLastLoginDate()
    {
        $date = $this->getCustomerLog()->getLoginAtTimestamp();
        if ($date) {
            return $this->formatDate($date, TimezoneInterface::FORMAT_TYPE_MEDIUM, true);
        }
        return __('Never');
    }

    /**
     * Gets the store last login date.
     * @return string Last login date.
     */
    public function getStoreLastLoginDate()
    {
        $date = $this->getCustomerLog()->getLoginAtTimestamp();
        if ($date) {
            $date = $this->_localeDate->scopeDate($this->getCustomer()->getStoreId(), $date, true);
            return $this->formatDate($date, TimezoneInterface::FORMAT_TYPE_MEDIUM, true);
        }
        return __('Never');
    }

    /**
     * Gets the time zone for the store last login date.
     * @return string Time zone.
     */
    public function getStoreLastLoginDateTimezone()
    {
        return $this->_scopeConfig->getValue(
            $this->_localeDate->getDefaultTimezonePath(),
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
            $this->getCustomer()->getStoreId()
        );
    }

    /**
     * Gets the current status.
     * @return string Status.
     */
    public function getCurrentStatus()
    {
        $log = $this->getCustomerLog();
        $interval = $this->_modelVisitor->getOnlineMinutesInterval();
        if ($log->getLogoutAt()
            || strtotime(
                $this->dateTime->now()
            ) - strtotime(
                $log->getLastVisitAt()
            ) > $interval * 60
        ) {
            return __('Offline');
        }
        return __('Online');
    }

    /**
     * Gets the is-confirmed status.
     * @return string Status.
     */
    public function getIsConfirmedStatus()
    {
        $id = $this->getCustomerId();
        switch ($this->_accountService->getConfirmationStatus($id)) {
            case CustomerAccountServiceInterface::ACCOUNT_CONFIRMED:
                return __('Confirmed');
            case CustomerAccountServiceInterface::ACCOUNT_CONFIRMATION_REQUIRED:
                return __('Confirmation Required');
            case CustomerAccountServiceInterface::ACCOUNT_CONFIRMATION_NOT_REQUIRED:
                return __('Confirmation Not Required');
        }
        return __('Indeterminate');
    }

    /**
     * Gets the ID of the store where the customer was created.
     * @return null|string Store ID. Otherwise, null.
     */
    public function getCreatedInStore()
    {
        return $this->_storeManager->getStore($this->getStoreId())->getName();
    }

    /**
     * Gets the store ID.
     * @return int Store ID.
     */
    public function getStoreId()
    {
        return $this->getCustomer()->getStoreId();
    }

    /**
     * Gets HTML to display the billing address.
     * @return string|null Billing address HTML. Otherwise, null.
     */
    public function getBillingAddressHtml()
    {
        try {
            $address = $this->_addressService->getAddress($this->getCustomer()->getDefaultBilling());
        } catch (NoSuchEntityException $e) {
            return __('The customer does not have default billing address.');
        }
        return $this->_addressHelper->getFormatTypeRenderer(
            'html'
        )->renderArray(
            AddressConverter::toFlatArray($address)
        );
    }

    /**
     * Gets HTML to display an accordian.
     * @return string Accordian HTML. Otherwise, null.
     */
    public function getAccordionHtml()
    {
        return $this->getChildHtml('accordion');
    }

    /**
     * Gets HTML to display sales.
     * @return string Sales HTML.
     */
    public function getSalesHtml()
    {
        return $this->getChildHtml('sales');
    }

    /**
     * Gets the tab label.
     * @return string Tab label.
     */
    public function getTabLabel()
    {
        return __('Customer View');
    }

    /**
     * Gets the tab title.
     * @return string Tab title.
     */
    public function getTabTitle()
    {
        return __('Customer View');
    }

    /**
     * Determines whether the tab can be shown.
     * @return bool * **true** Can be shown.
     * * **false** Cannot be shown.
     */
    public function canShowTab()
    {
        if ($this->getCustomerId()) {
            return true;
        }
        return false;
    }

    /**
     * Determines whether the customer ID is hidden.
     * @return bool * **true** Hidden.
     * * **false** Visible.
     */
    public function isHidden()
    {
        if ($this->getCustomerId()) {
            return false;
        }
        return true;
    }
}

