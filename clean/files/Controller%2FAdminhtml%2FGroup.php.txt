<?php
/**
 * Customer groups controller.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Controller\Adminhtml;

use Magento\Customer\Service\V1\CustomerGroupServiceInterface;
use Magento\Customer\Service\V1\Data\CustomerGroupBuilder;

/**
 * Customer groups controller.
 */
class Group extends \Magento\Backend\App\Action
{
    /**
     * Core registry.
     *
     * @var \Magento\Framework\Registry
     */
    protected $_coreRegistry;

    /**
     * @var CustomerGroupServiceInterface Group service.
     */
    protected $_groupService;

    /**
     * @var CustomerGroupBuilder Customer group builder.
     */
    protected $_customerGroupBuilder;

    /**
     * Initializes the group controller.
     *
     * @param \Magento\Backend\App\Action\Context $context Context.
     * @param \Magento\Framework\Registry $coreRegistry Core registry.
     * @param CustomerGroupServiceInterface $groupService Group service.
     * @param CustomerGroupBuilder $customerGroupBuilder Customer group builder.
     */
    public function __construct(
        \Magento\Backend\App\Action\Context $context,
        \Magento\Framework\Registry $coreRegistry,
        CustomerGroupServiceInterface $groupService,
        CustomerGroupBuilder $customerGroupBuilder
    ) {
        $this->_coreRegistry = $coreRegistry;
        $this->_groupService = $groupService;
        $this->_customerGroupBuilder = $customerGroupBuilder;
        parent::__construct($context);
    }

    /**
     * Determines whether a customer is authored to perform group actions.
     *
     * @return bool * **true** Authorized.
     * * **false** Not authorized.
     */
    protected function _isAllowed()
    {
        return $this->_authorization->isAllowed('Magento_Customer::group');
    }
}

