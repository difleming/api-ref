<?php
/**
 * Constructor and getters for customers.
 * {license_notice}
 *
 * @copyright   {copyright}
 * @license     {license_link}
 */
namespace Magento\Customer\Block\Account;

use Magento\Customer\Service\V1\CustomerAccountServiceInterface;

/**
 * Constructs and gets information about a customer object.
 *
 * Use the customer methods to:
 * * Construct a customer object.
 * * Determine whether a customer is logged in.
 * * Get the full name of the logged-in customer.
 * @package Magento\Customer\Block\Account
 */
class Customer extends \Magento\Framework\View\Element\Template
{
    /**
     * @var \Magento\Customer\Service\V1\CustomerAccountServiceInterface Customer account service object.
     */
    protected $_customerAccountService;

    /**
     * @var \Magento\Customer\Helper\View View help object.
     */
    protected $_viewHelper;

    /**
     * @var \Magento\Framework\App\Http\Context Context object.
     */
    protected $httpContext;

    /**
     * @var \Magento\Customer\Helper\Session\CurrentCustomer Customer object.
     */
    protected $currentCustomer;

    /**
     * Constructs a customer object.
     *
     * @param \Magento\Framework\View\Element\Template\Context $context Context.
     * @param CustomerAccountServiceInterface $customerAccountService Customer account service object.
     * @param \Magento\Customer\Helper\View $viewHelper View helper object.
     * @param \Magento\Framework\App\Http\Context $httpContext HTTP context.
     * @param \Magento\Customer\Helper\Session\CurrentCustomer $currentCustomer Customer object.
     * @param array $data Array of data.
     */
    public function __construct(
        \Magento\Framework\View\Element\Template\Context $context,
        CustomerAccountServiceInterface $customerAccountService,
        \Magento\Customer\Helper\View $viewHelper,
        \Magento\Framework\App\Http\Context $httpContext,
        \Magento\Customer\Helper\Session\CurrentCustomer $currentCustomer,
        array $data = array()
    ) {
        parent::__construct($context, $data);
        $this->_customerAccountService = $customerAccountService;
        $this->_viewHelper = $viewHelper;
        $this->httpContext = $httpContext;
        $this->currentCustomer = $currentCustomer;
        $this->_isScopePrivate = true;
    }

    /**
     * Determines whether a customer is logged in.
     *
     * @return bool * **true** - Logged in.
     * * **false** - Is not logged in.
     */
    public function customerLoggedIn()
    {
        return (bool)$this->httpContext->getValue(\Magento\Customer\Helper\Data::CONTEXT_AUTH);
    }

    /**
     * Gets the full name of the currently logged-in customer.
     *
     * @return string|null * If present, full name of logged-in customer.
     * * Otherwise, null.
     */
    public function getCustomerName()
    {
        try {
            $customer = $this->_customerAccountService->getCustomer($this->currentCustomer->getCustomerId());
            return $this->escapeHtml($this->_viewHelper->getCustomerName($customer));
        } catch (\Magento\Framework\Exception\NoSuchEntityException $e) {
            return null;
        }
    }
}

