<?php
/**
 * AttributeMetadataBuilder.php defines a class that builds an address metadata service data object.
 *
 * {license_notice}
 *
 * @copyright {copyright}
 * @license {license}
 */
namespace Magento\Customer\Service\V1\Data\Eav;

/**
 * Performs actions on an AttributeMetadataBuilder object.
 */
class AttributeMetadataBuilder extends \Magento\Framework\Service\Data\AbstractObjectBuilder
{
    /**
     * Option builder.
     *
     * @var \Magento\Customer\Service\V1\Data\Eav\OptionBuilder OptionBuilder object.
     */
    protected $_optionBuilder;

    /**
     * Validation rule builder.
     *
     * @var \Magento\Customer\Service\V1\Data\Eav\ValidationRuleBuilder ValidationRuleBuilder object.
     */
    protected $_validationRuleBuilder;

    /**
     * Constructs an attribute metadata service object.
     *
     * @param \Magento\Framework\Service\Data\ObjectFactory $objectFactory ObjectFactory object.
     * @param OptionBuilder $optionBuilder OptionBuilder object.
     * @param ValidationRuleBuilder $validationRuleBuilder ValidationRuleBuilder object.
     */
    public function __construct(
        \Magento\Framework\Service\Data\ObjectFactory $objectFactory,
        \Magento\Customer\Service\V1\Data\Eav\OptionBuilder $optionBuilder,
        \Magento\Customer\Service\V1\Data\Eav\ValidationRuleBuilder $validationRuleBuilder
    ) {
        parent::__construct($objectFactory);
        $this->_optionBuilder = $optionBuilder;
        $this->_validationRuleBuilder = $validationRuleBuilder;
        $this->_data[AttributeMetadata::OPTIONS] = array();
        $this->_data[AttributeMetadata::VALIDATION_RULES] = array();
    }

    /**
     * Sets the attribute code.
     *
     * @param string $attributeCode Attribute code.
     * @return $this Updated attributed metadata object.
     */
    public function setAttributeCode($attributeCode)
    {
        return $this->_set(AttributeMetadata::ATTRIBUTE_CODE, $attributeCode);
    }

    /**
     * Sets the front-end input value.
     *
     * @param string $frontendInput Front-end input value.
     * @return $this Updated attribute metadata object.
     */
    public function setFrontendInput($frontendInput)
    {
        return $this->_set(AttributeMetadata::FRONTEND_INPUT, $frontendInput);
    }

    /**
     * Sets the input filter value.
     *
     * @param string $inputFilter Input filter value.
     * @return $this Updated attribute metadata object.
     */
    public function setInputFilter($inputFilter)
    {
        return $this->_set(AttributeMetadata::INPUT_FILTER, $inputFilter);
    }

    /**
     * Sets the store label.
     *
     * @param string $storeLabel Store label.
     * @return $this Updated attribute metadata object.
     */
    public function setStoreLabel($storeLabel)
    {
        return $this->_set(AttributeMetadata::STORE_LABEL, $storeLabel);
    }

    /**
     * Sets validation rules.
     *
     * @param \Magento\Customer\Service\V1\Data\Eav\ValidationRule[] $validationRules Array of validation rules.
     * @return $this Updated attribute metadata object.
     */
    public function setValidationRules($validationRules)
    {
        return $this->_set(AttributeMetadata::VALIDATION_RULES, $validationRules);
    }

    /**
     * Set options.
     * 
     * @param \Magento\Customer\Service\V1\Data\Eav\Option[] $options Array of options.
     * @return $this Updated attribute metadata object.
     */
    public function setOptions($options)
    {
        return $this->_set(AttributeMetadata::OPTIONS, $options);
    }

    /**
     * Sets the visible status.
     *
     * @param bool $visible Visable status. True is visible.
     * @return $this Updated attribute metadata object.
     */
    public function setVisible($visible)
    {
        return $this->_set(AttributeMetadata::VISIBLE, $visible);
    }

    /**
     * Sets required status.
     *
     * @param bool $required Required status. True is required.
     * @return $this Updated attributed metadata object.
     */
    public function setRequired($required)
    {
        return $this->_set(AttributeMetadata::REQUIRED, $required);
    }

    /**
     * Sets the multi-line count.
     *
     * @param int $count Count.
     * @return $this Updated attribute metadata object.
     */
    public function setMultilineCount($count)
    {
        return $this->_set(AttributeMetadata::MULTILINE_COUNT, $count);
    }

    /**
     * Sets the data model.
     *
     * @param string $dataModel Data model.
     * @return $this Updated attribute metadata object.
     */
    public function setDataModel($dataModel)
    {
        return $this->_set(AttributeMetadata::DATA_MODEL, $dataModel);
    }

    /**
     * Sets the front-end class.
     *
     * @param string $frontendClass Front-end class.
     * @return $this Updated attribute metadata object.
     */
    public function setFrontendClass($frontendClass)
    {
        return $this->_set(AttributeMetadata::FRONTEND_CLASS, $frontendClass);
    }

    /**
     * Sets is user defined
     *
     * @param bool $isUserDefined
     * @return $this Updated attribute metadata object.
     */
    public function setIsUserDefined($isUserDefined)
    {
        return $this->_set(AttributeMetadata::IS_USER_DEFINED, $isUserDefined);
    }

    /**
     * Set sort order
     *
     * @param int $sortOrder
     * @return $this Updated attribute metadata object.
     */
    public function setSortOrder($sortOrder)
    {
        return $this->_set(AttributeMetadata::SORT_ORDER, $sortOrder);
    }

    /**
     * Set front end label
     *
     * @param string $frontendLabel
     * @return $this Updated attribute metadata object.
     */
    public function setFrontendLabel($frontendLabel)
    {
        return $this->_set(AttributeMetadata::FRONTEND_LABEL, $frontendLabel);
    }

    /**
     * Set is system
     *
     * @param bool $isSystem
     * @return $this Updated attribute metadata object.
     */
    public function setIsSystem($isSystem)
    {
        return $this->_set(AttributeMetadata::IS_SYSTEM, $isSystem);
    }

    /**
     * Set note
     *
     * @param string $note
     * @return $this Updated attribute metadata object.
     */
    public function setNote($note)
    {
        return $this->_set(AttributeMetadata::NOTE, $note);
    }

    /**
     * Sets the back-end type.
     *
     * @param string $backendType Back-end type.
     * @return AttributeMetadataBuilder Updated attribute metadata object.
     */
    public function setBackendType($backendType)
    {
        return $this->_set(AttributeMetadata::BACKEND_TYPE, $backendType);
    }

    /**
     * {@inheritdoc}
     */
    protected function _setDataValues(array $data)
    {
        if (array_key_exists(AttributeMetadata::OPTIONS, $data)) {
            $options = array();
            if (is_array($data[AttributeMetadata::OPTIONS])) {
                foreach ($data[AttributeMetadata::OPTIONS] as $key => $option) {
                    $options[$key] = $this->_optionBuilder->populateWithArray($option)->create();
                }
            }
            $validationRules = array();
            if (is_array($data[AttributeMetadata::VALIDATION_RULES])) {
                foreach ($data[AttributeMetadata::VALIDATION_RULES] as $key => $value) {
                    $validationRules[$key] = $this->_validationRuleBuilder->populateWithArray($value)->create();
                }
            }

            $data[AttributeMetadata::OPTIONS] = $options;
            $data[AttributeMetadata::VALIDATION_RULES] = $validationRules;
        }

        return parent::_setDataValues($data);
    }
}

