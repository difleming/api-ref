<?php
/**
 * CustomerGroupServiceInterface.php defines an interface that
 * performs actions on customer groups.
 *
 * {license_notice}
 *
 * @copyright {copyright}
 * @license {license}
 */
namespace Magento\Customer\Service\V1;

/**
 *
 * Defines constants and required methods for customer groups.
 *
 * The constants for customer groups define the default group ID, the maximum number of groups, and
 * the maximum number of characters in a group name.
 *
 * The methods for customer groups enable users to:
 * * Add, update, list, and delete groups.
 * * Find groups that match specified search criteria.
 * * Get the default group in a store, the delete status for a group, and group details.
 */
interface CustomerGroupServiceInterface
{
    /**#@+
     *
     * Summary description of constants.
     *#@-
     */

    /**
     * The default group ID.
     */
    const NOT_LOGGED_IN_ID = 0;
    /**
     * The maximum number of groups.
     */
    const CUST_GROUP_ALL = 32000;
    /**
     * The maximum number of characters in a group name.
     */
    const GROUP_CODE_MAX_LENGTH = 32;


    /**
     * Lists groups.
     *
     * Use the $includeNotLoggedIn parameter to exclude the default group from the group list.
     * Use the $taxClassId parameter to filter the group list by a specified tax class.
     *
     * @param bool $includeNotLoggedIn (Optional) Set to true to exclude the NOT_LOGGED_IN group from the group list. Default is true.
     * @param int $taxClassId (Optional) The ID of the tax class. Default is null.
     *
     * @return \Magento\Customer\Service\V1\Data\CustomerGroup[] Group list.
     */
    public function getGroups($includeNotLoggedIn = true, $taxClassId = null);

    /**
     * Searches groups.
     *
     * @param \Magento\Framework\Service\V1\Data\SearchCriteria $searchCriteria
     * @throws \Magento\Framework\Exception\InputException If there is a problem with the input
     * @return \Magento\Customer\Service\V1\Data\SearchResults containing Data\CustomerGroup objects
     */
    public function searchGroups(\Magento\Framework\Service\V1\Data\SearchCriteria $searchCriteria);

    /**
     * Gets a customer group by group ID.
     *
     * @param int $groupId
     * @throws \Magento\Framework\Exception\NoSuchEntityException If $groupId is not found
     * @return \Magento\Customer\Service\V1\Data\CustomerGroup
     */
    public function getGroup($groupId);

    /**
     * Gets the default group.
     *
     * @param int $storeId Defaults the current store
     * @throws \Magento\Framework\Exception\NoSuchEntityException If default group for $storeId is not found
     * @return \Magento\Customer\Service\V1\Data\CustomerGroup
     */
    public function getDefaultGroup($storeId = null);

    /**
     * Determines whether a specified group can be deleted.
     *
     * @param int $groupId
     * @throws \Magento\Framework\Exception\NoSuchEntityException If group is not found
     * @return bool True, if this group can be deleted
     */
    public function canDelete($groupId);

    /**
     * Saves a specified group.
     *
     * @param \Magento\Customer\Service\V1\Data\CustomerGroup $group
     * @throws \Magento\Framework\Exception\InputException If there is a problem with the input
     * @throws \Magento\Framework\Exception\NoSuchEntityException If a group ID is sent but the group does not exist
     * @throws \Magento\Framework\Exception\State\InvalidTransitionException
     *      If saving customer group with customer group code that is used by an existing customer group
     * @throws \Magento\Framework\Model\Exception If something goes wrong during save
     * @return int customer group ID
     */
    public function saveGroup(\Magento\Customer\Service\V1\Data\CustomerGroup $group);

    /**
     * Deletes a specified group.
     *
     * @param int $groupId
     * @throws \Magento\Framework\Exception\NoSuchEntityException If $groupId is not found
     * @throws \Magento\Framework\Exception\StateException Thrown if cannot delete group
     * @throws \Exception If something goes wrong during delete
     * @return bool True if the group was deleted
     */
    public function deleteGroup($groupId);
}

