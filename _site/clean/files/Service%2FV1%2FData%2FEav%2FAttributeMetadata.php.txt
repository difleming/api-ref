<?php
/**
 * Attribute metadata functions.
 *
 * {license_notice}
 *
 * @copyright {copyright}
 * @license {license}
 */
namespace Magento\Customer\Service\V1\Data\Eav;

/**
 * Gets attribute metadata information.
 */
class AttributeMetadata extends \Magento\Framework\Service\Data\AbstractObject
{
    /**#@+
     * Constants used as keys into $_data.
     */
    /**
     * Attribute code.
     */
    const ATTRIBUTE_CODE = 'attribute_code';
    /**
     * Front-end HTML for an input element.
     */

    const FRONTEND_INPUT = 'frontend_input';
    /**
     * Input filter that is used for the attribute.
     */

    const INPUT_FILTER = 'input_filter';
    /**
     * Store label.
     */

    const STORE_LABEL = 'store_label';
    /**
     * Validation rules.
     */

    const VALIDATION_RULES = 'validation_rules';
    /**
     * Options.
     */

    const OPTIONS = 'options';
    /**
     * Indicates whether the attribute is visible on the front end.
     */

    const VISIBLE = 'visible';
    /**
     * Indicates whether the attribute is required.
     */

    const REQUIRED = 'required';
    /**
     * Count of attribute lines.
     */

    const MULTILINE_COUNT = 'multiline_count';
    /**
     * Data model.
     */

    const DATA_MODEL = 'data_model';
    /**
     * Indicates whether a user has defined an attribute.
     */

    const IS_USER_DEFINED = 'is_user_defined';
    /**
     *  Class that is used to display the attribute on the front end.
     */
    const FRONTEND_CLASS = 'frontend_class';
    /**
     * Sort order for attributes.
     */

    const SORT_ORDER = 'sort_order';
    /**
     * Label that appears on the front end.
     */

    const FRONTEND_LABEL = 'frontend_label';
    /**
     * Indicates whether the attribute is a system attribute.
     */

    const IS_SYSTEM = 'is_system';
    /**
     * The attribute note for an element.
     */

    const NOTE = 'note';
    /*
     * Back-end type for the attribute.
     */

    const BACKEND_TYPE = 'backend_type';

    /**#@-*/

    /**
     * Gets the code for the attribute.
     *
     * @return string Attribute code.
     */
    public function getAttributeCode()
    {
        return $this->_get(self::ATTRIBUTE_CODE);
    }

    /**
     * Gets the front-end HTML for an input element.
     *
     * @return string Front-end HTML.
     */
    public function getFrontendInput()
    {
        return $this->_get(self::FRONTEND_INPUT);
    }

    /**
     * Gets the input filter that is used for the attribute. For example, <i>date</i>.
     *
     * @return string Input filter.
     */
    public function getInputFilter()
    {
        return $this->_get(self::INPUT_FILTER);
    }

    /**
     * Gets the store label.
     *
     * @return string Store label.
     */
    public function getStoreLabel()
    {
        return $this->_get(self::STORE_LABEL);
    }

    /**
     * Gets an array of validation rules.
     *
     * @return \Magento\Customer\Service\V1\Data\Eav\ValidationRule[] Array of validation rules.
     */
    public function getValidationRules()
    {
        return $this->_get(self::VALIDATION_RULES);
    }

    /**
     * Gets the number attribute-value lines.
     *
     * @return int Number of attribute-value lines.
     */
    public function getMultilineCount()
    {
        return $this->_get(self::MULTILINE_COUNT);
    }

    /**
     * Determines whether the attribute is visible on the front end.
     *
     * @return bool <b>true</b> - Attribute is visible. <b>false</b> - Attribute is not visible.
     */
    public function isVisible()
    {
        return $this->_get(self::VISIBLE);
    }

    /**
     * Determines whether the attribute is required.
     *
     * @return bool <b>true</b> - Attribute is required. <b>false</b> - Attribute is optional.
     */
    public function isRequired()
    {
        return $this->_get(self::REQUIRED);
    }

    /**
     * Gets the data model for the attribute.
     *
     * @return string Data model.
     */
    public function getDataModel()
    {
        return $this->_get(self::DATA_MODEL);
    }

    /**
     * Gets options for the attribute. <i>key => value pairs for select</i>
     *
     * @return \Magento\Customer\Service\V1\Data\Eav\Option[] An array of attribute options.
     */
    public function getOptions()
    {
        return $this->_get(self::OPTIONS);
    }

    /**
     * Gets the class that is used to display the attribute on the front end.
     *
     * @return string Front-end class.
     */
    public function getFrontendClass()
    {
        return $this->_get(self::FRONTEND_CLASS);
    }

    /**
     * Determines whether a user has defined the current attribute.
     *
     * @return bool <b>true</b> - A user has defined the attribute. <b>false</b> - No user has defined the attribute.
     */
    public function isUserDefined()
    {
        return $this->_get(self::IS_USER_DEFINED);
    }

    /**
     * Gets the sort order for attributes.
     *
     * @return int Sort order.
     */
    public function getSortOrder()
    {
        return $this->_get(self::SORT_ORDER);
    }

    /**
     * Gets the label to be displayed on the front end.
     *
     * @return string Front-end label.
     */
    public function getFrontendLabel()
    {
        return $this->_get(self::FRONTEND_LABEL);
    }

    /**
     * Gets the note attribute for the element.
     *
     * @return string Note.
     */
    public function getNote()
    {
        return $this->_get(self::NOTE);
    }

    /**
     * Determines whether the attribute is a system attribute.
     *
     * @return bool <b>true</b> - System attribute. <b>false</b> - Not a system attribute.
     */
    public function isSystem()
    {
        return $this->_get(self::IS_SYSTEM);
    }

    /**
     * Gets the back-end type for the attribute.
     *
     * @return string Back-end type.
     */
    public function getBackendType()
    {
        return $this->_get(self::BACKEND_TYPE);
    }
}

